Java:
======

Language: English,telugu,hindi,tamil.....

	Communication with human
	
Programming Language:

	Communication with machine--S/W
	
	application-->programs--PL
	
	c,c++,java,python,.net...
	
	
	JAVA
	
	
		POP					OOP
B,BCPL,C,COBOL,PHOTON...  C++,Java,Python,.net......oops features

			Performance:Inheritance,Polymorphisam
			Security:   abstraction,encapsulation
					

Why Java?

	1)Platform Independent --java app-->WORA
	2)garbage Colletion -->automated-->garbage collector-->
	
	
		netflix-app-->platform independent
		
		devices -IOS,android,windows
		
		sun micro system -->Oracle	microsoft
		windows-11					windows-11
		
		java app						.net app--platform dependent
			
		
		
roopa 			mayuri
linux			mac
		
		
		
		OAK-->Java-->1996 JDK 1.0  -->James Gosling
		
			   2024	java 22 mar
		
	Hello World

Java App
	welcome to java
	
	
	Java-->JDK --8 java 19-->8


https://www.javatpoint.com/javafx-how-to-install-java

java 8  2030
java 22

LTS-->

JSE-->
				Java
JSE 			JEE 		  JME


standalone apps /desktop -->notepadd++,vlc mediaplayer,eclipse,...JSE:corejava/awt/swings

web apps	-->gmail,amazon,.....JEE:Servlets,jsp,mvc,...

mobile apps	-->JME:android


Java app-->compile,run


java setup

	java -version
	javac -version

	1.8
	8

	jdk 1.0
		6
		7
		8
		9
		
		.c
		.cpp
		.html
		.css
		.js
		.java
		
		
	alphabates	
	
	keywords -->PL-->53-->lowercase 
	
	compailation
	execution
	JVM
	JDK
	JRE
	Compiler
	.java
	.class
	
Identifiers:
============
	identification 
	
	any name in java will call it as identifier
	
	
	class name,variable name,method name,interface name,label name
	
	a-z
	A-Z
	0-9
	$
	_
	
	we can use digits in identifier but we cannot start with start digit 
	
	class
	
	
	Variables & Datatypes:
	======================
			variable is name given to the memory location
			
				
	syntax:
			
			datatype varname=value;//static typed PL    let/var a=123   
			
					 age=32
				long contact=99090909090//
	
	datatypes: 10
	
		PDT 			NPDT
		8 keywords			arrays,String,...
		
		byte     -128 to 127				1 byte	
		short	-32768 to 32767				2 bytes
		int		-2147483648 to				4 bytes					numeric data
		long								8 bytes
		
		float    4 bytes 	 5 to 6 decimal  23.4872734233234
		double 	 8 bytes	14 to 15 				decimal
		
		char	 2 bytes	'M'  / 'F'		UNICODE-18	ASCII  a-97 A-65	
		boolean	 1 bit	true-1,false-0
		
		
eclipse,intellji,myeclipse,vscode....IDE
		
		
		eclipse 
		
ctrl + a
ctrl+shift+f	 to format java file
ctrl + space	to get template suggestions
ctrl+/   to add or remove single line comments


package 

import  -->#include stdio.h
		    #include conio.h


folder-->its a collection of files

package -->its a collection of java/class files


		2 types packages  jar-->java archive file-->.class
		
		predfined  6000+  System,String   Java api and packages
		
		user defined -->package

package names must be in lower case
	
		java.lang.
		java.awt
		java.io
		java.util
		....


		System-->PascalCase
		methodnames/variable names--->camelCase
		
		SandeepSomavarapu-->pascal case -->classes/interfaces
		sandeepSomavarapu-->camelcase-->methods/variables
		packagename -->lowercase
		


Variables:		
		instance/static 
		
		2 types
		
		1)local variable		-->the variable which is defined inside the method/block
		2)global variable       -->the variable which is declared inside the class and outisde the method 
		
			instance /non static
			static 
4 key points
Syntax:
======
		we will use static keyword to define static properties(variable/method/block) 
		if there is no keyword static that is instance(variable/method/block) 
Memory:	int a=123//4 bytes  static short countryCode=91
=======
		static/class properties will get memory only once at the time class loading into JVM   javac filename.java  java classname

		instance properties/object will get memory at the time of object creation
		
				class is a collection of data members(variables) and member functions(methods)  class classname{}
				object is a instance(memory) of a class		
					classname objname=new classname();//syntax to create an object
Access:
=======
		we can access static properties by using classname
		we can access instance properties by using object reference
Usage:
=======
		for common properties where we required one time memory will go with static
				countryname-->india-->common
				orgname	-->kpmg
				statename-->telangana 
				schoolname-->SHS
				collegename-->nova
		for unique data will go with instance which is different for object to object, where we required unique memory 	
			eid,ename,esal,edesg,eaadhar,econtact
						
arrays:
=======		
		int eid=123;
			eid=124;
			
			sop(eid);//124
		
		
		variables-->only one value 
		
		multiple values 
		
		arrays-->group of values of same type
		[]
		
		
		int marks[]={123,321,222,412,122,1244,5912,89};
		int marks[]=new int[10];//size is mandatory  AIOE
		
		index-->0,1,2,3,4,5,6,7,8,9
		
		
		marks[0]=11
		marks[1]=21
		marks[2]=90
		marks[10]=78;//AIOE
		
		
		int arr[][]=new int[3][3];2-d
		
		
Flow Control statements:
=======================
		
		
			if
			else
			switch
			for
			do
			while
			
methods
		
		
Run time data :
===============

Scanner-->dynamic input


OOPS Features :
==============
		OOP-->java -->Inheritance,polymorphisam,abstraction,encapsulation
		POP
		
		Inheritance:
		=============
			it is a process of aquiring/loading the properties from one class to another class
		
			parent class /super 
			
			
			child class/sub/derived class
		
		
		"CODE REUSABILITY"-->extends,implements
		
	class Caluculator{
	
	add
	sub
	mul
	div
	
	}	
		
	class MobileCaluculator  extends Caluculator   		class laptopCalci extends Caluculator
	{													{
		modula											square
	
	}													}
		
		
		
		
Single level inheritance:
========================		
package com.kpmg.oops;

class Caluculator {

	public void add(int a, int b) {
		System.out.println("add of two numbers is : " + (a + b));
	}

	public void sub(int a, int b) {
		System.out.println("sub of two numbers is : " + (a - b));
	}

	public void mul(int a, int b) {
		System.out.println("mul of two numbers is : " + (a * b));
	}
}

class MobileCalci  extends Caluculator{
	public void div(int a, int b) {
		System.out.println("div of two numbers is : " + (a / b));
	}
}

public class InheritanceTest {

	public static void main(String[] args) {
		MobileCalci obj=new MobileCalci();
		obj.add(12,14);//code re usability
		obj.sub(12,14);
		obj.mul(12,14);
		
		obj.div(12,2);
	}

}


Multilevel example:
====================

package com.kpmg.oops;

class Caluculator {

	public void add(int a, int b) {
		System.out.println("add of two numbers is : " + (a + b));
	}

	public void sub(int a, int b) {
		System.out.println("sub of two numbers is : " + (a - b));
	}

	public void mul(int a, int b) {
		System.out.println("mul of two numbers is : " + (a * b));
	}
}

class MobileCalci extends Caluculator {
	public void div(int a, int b) {
		System.out.println("div of two numbers is : " + (a / b));
	}
}

class LaptopCalci extends MobileCalci {
	public void mod(int a, int b) {
		System.out.println("mod of two numbers is : " + (a % b));
	}
}

public class InheritanceTest {

	public static void main(String[] args) {
		LaptopCalci obj = new LaptopCalci();
		obj.add(12, 14);// code re usability
		obj.sub(12, 14);
		obj.mul(12, 14);

		obj.div(12, 2);
		
		obj.mod(12, 9);
		
	}

}

		Hirarchie Level:
		===============
package com.kpmg.oops;

class Caluculator {

	public void add(int a, int b) {
		System.out.println("add of two numbers is : " + (a + b));
	}

	public void sub(int a, int b) {
		System.out.println("sub of two numbers is : " + (a - b));
	}

	public void mul(int a, int b) {
		System.out.println("mul of two numbers is : " + (a * b));
	}
}

class MobileCalci extends Caluculator {
	public void div(int a, int b) {
		System.out.println("div of two numbers is : " + (a / b));
	}
}

class LaptopCalci extends Caluculator {
	public void mod(int a, int b) {
		System.out.println("mod of two numbers is : " + (a % b));
	}
}
public class InheritanceTest {
	public static void main(String[] args) {
		LaptopCalci obj = new LaptopCalci();
		obj.add(12, 14);// code re usability
		obj.sub(12, 14);
		obj.mul(12, 14);
		//obj.div(12, 2);//this is not allowed in hirarchie  
		obj.mod(12, 9);
	}
}
		
		
		Abstraction:
		==============
		hiding
		
		
		ATM screen
		-->w,d,be,pin,....implementation hidden
		
			
			
			methods
			
				abstract method-->method with out implementation(body)
		
			non-abstract/concrete method-->method with implementation(body)
			
			
			public void display()
			{
			...
			...
			..
			..
			..
			}//concrete method/non-abstract method
			
					public abstract void m1();   //abstract method
			
			class	:it is collection of only concrete methods
			abstract class:it is combination both concrete and abstract methods  0-100
			interfaces	:it is collection of only abstract methods and by default interface methods are public abstract.
			
												100%
		
		
		
		
					abstract class:it is combination both concrete and abstract methods  0-100
				1.abstract class can have only concrete methods
				2.abstract class can have only abstract methods
				3.a normal class cannot have abstract methods
				4.if atleast one abstract method is there inside the class that class also should have abstract keyword
				5.we can not create an object for abstract class
				6.we can extend abstract class but as a child either we have to provide implementation
					for unimplemented methods or we can make child class also as abstract
					
				Interface:	
		
		interface Animal {
			public void animalSound(); // interface method (does not have a body)
			public void run(); // interface method (does not have a body)
		}
		
			1)we can achieve abstraction 100%
			2)we cannot create object for interface
			3)we can achieve MI in java 
			4)interface methods by default abstract
			5)interface variables are by default public static final
			6)to use interface methods there must be implementation class
			
		
		Multiple Inheritance:
		=====================
		Java Doesn't support MI using classes
		Java supports MI using interfaces
				
	
		
		class Parent				class Parent1
		{							{
			m1()					m1()
			{						{
			"hello"					"hi"
			}						}
		
		}							}
		
		
		class Child extends Parent,Parent1
		{
		Child child =new Child();
			child.m1();//hello,hi
		}
		
		
				
		interface Parent				interface Parent1
		{							{
			m1();					m1();
		}							}
		
		
		class Child implements Parent,Parent1
		{
		Child child =new Child();
			child.m1();//hello,hi
			
			
			m1()
			{
			
			}
		}
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		
		










































	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	






	




		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	